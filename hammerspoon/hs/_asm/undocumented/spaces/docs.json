[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "LEGACY: The number of spaces you currently have.\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces ignoring that fullscreen applications are included in the list twice, and only worked with one monitor.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`.",
        "name" : "count",
        "stripped_doc" : [
          "LEGACY: The number of spaces you currently have.",
          ""
        ],
        "desc" : "LEGACY: The number of spaces you currently have.",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces ignoring that fullscreen applications are included in the list twice, and only worked with one monitor.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`."
        ],
        "signature" : "hs._asm.undocumented.spaces.count() -> number",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.count() -> number",
        "parameters" : [

        ]
      },
      {
        "doc" : "LEGACY: The index of the space you're currently on, 1-indexed (as usual).\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`.",
        "name" : "currentSpace",
        "stripped_doc" : [
          "LEGACY: The index of the space you're currently on, 1-indexed (as usual).",
          ""
        ],
        "desc" : "LEGACY: The index of the space you're currently on, 1-indexed (as usual).",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`."
        ],
        "signature" : "hs._asm.undocumented.spaces.currentSpace() -> number",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.currentSpace() -> number",
        "parameters" : [

        ]
      },
      {
        "doc" : "LEGACY: Switches to the space at the given index, 1-indexed (as usual).\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it was never really reliable and worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.changeToSpace`.",
        "name" : "moveToSpace",
        "stripped_doc" : [
          "LEGACY: Switches to the space at the given index, 1-indexed (as usual).",
          ""
        ],
        "desc" : "LEGACY: Switches to the space at the given index, 1-indexed (as usual).",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it was never really reliable and worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.changeToSpace`."
        ],
        "signature" : "hs._asm.undocumented.spaces.moveToSpace(number)",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.moveToSpace(number)",
        "parameters" : [

        ]
      },
      {
        "doc" : "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.\n\nParameters:\n * screen - an optional hs.screen object specifying the specific monitor to check the animation status for.\n\nReturns:\n * a boolean value indicating whether or not a space changing animation is currently active.\n\nNotes:\n * This function can be used in `hs.eventtap` based space changing functions to determine when to release the mouse and key events.\n\n * This function is also added to the `hs.screen` object metatable so that you can check a specific screen's animation status with `hs.screen:spacesAnimating()`.",
        "name" : "isAnimating",
        "stripped_doc" : [
          "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.",
          ""
        ],
        "desc" : "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.",
        "notes" : [
          " * This function can be used in `hs.eventtap` based space changing functions to determine when to release the mouse and key events.",
          "",
          " * This function is also added to the `hs.screen` object metatable so that you can check a specific screen's animation status with `hs.screen:spacesAnimating()`."
        ],
        "signature" : "hs._asm.undocumented.spaces.isAnimating([screen]) -> bool",
        "type" : "Function",
        "returns" : [
          " * a boolean value indicating whether or not a space changing animation is currently active.",
          ""
        ],
        "def" : "hs._asm.undocumented.spaces.isAnimating([screen]) -> bool",
        "parameters" : [
          " * screen - an optional hs.screen object specifying the specific monitor to check the animation status for.",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "These functions utilize private API's within the OS X internals, and are known to have unpredictable behavior under Mavericks and Yosemite when \"Displays have separate Spaces\" is checked under the Mission Control system preferences.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "Field" : [

    ],
    "Method" : [

    ],
    "items" : [
      {
        "doc" : "LEGACY: The number of spaces you currently have.\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces ignoring that fullscreen applications are included in the list twice, and only worked with one monitor.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`.",
        "name" : "count",
        "stripped_doc" : [
          "LEGACY: The number of spaces you currently have.",
          ""
        ],
        "desc" : "LEGACY: The number of spaces you currently have.",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces ignoring that fullscreen applications are included in the list twice, and only worked with one monitor.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`."
        ],
        "signature" : "hs._asm.undocumented.spaces.count() -> number",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.count() -> number",
        "parameters" : [

        ]
      },
      {
        "doc" : "LEGACY: The index of the space you're currently on, 1-indexed (as usual).\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`.",
        "name" : "currentSpace",
        "stripped_doc" : [
          "LEGACY: The index of the space you're currently on, 1-indexed (as usual).",
          ""
        ],
        "desc" : "LEGACY: The index of the space you're currently on, 1-indexed (as usual).",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.query` or `hs._asm.undocumented.spaces.spacesByScreenUUID`."
        ],
        "signature" : "hs._asm.undocumented.spaces.currentSpace() -> number",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.currentSpace() -> number",
        "parameters" : [

        ]
      },
      {
        "doc" : "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.\n\nParameters:\n * screen - an optional hs.screen object specifying the specific monitor to check the animation status for.\n\nReturns:\n * a boolean value indicating whether or not a space changing animation is currently active.\n\nNotes:\n * This function can be used in `hs.eventtap` based space changing functions to determine when to release the mouse and key events.\n\n * This function is also added to the `hs.screen` object metatable so that you can check a specific screen's animation status with `hs.screen:spacesAnimating()`.",
        "name" : "isAnimating",
        "stripped_doc" : [
          "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.",
          ""
        ],
        "desc" : "Returns the state of space changing animation for the specified monitor, or for any monitor if no parameter is specified.",
        "notes" : [
          " * This function can be used in `hs.eventtap` based space changing functions to determine when to release the mouse and key events.",
          "",
          " * This function is also added to the `hs.screen` object metatable so that you can check a specific screen's animation status with `hs.screen:spacesAnimating()`."
        ],
        "signature" : "hs._asm.undocumented.spaces.isAnimating([screen]) -> bool",
        "type" : "Function",
        "returns" : [
          " * a boolean value indicating whether or not a space changing animation is currently active.",
          ""
        ],
        "def" : "hs._asm.undocumented.spaces.isAnimating([screen]) -> bool",
        "parameters" : [
          " * screen - an optional hs.screen object specifying the specific monitor to check the animation status for.",
          ""
        ]
      },
      {
        "doc" : "LEGACY: Switches to the space at the given index, 1-indexed (as usual).\n\nNotes:\n * this function may go away in a future update\n\n * this functions is included for backwards compatibility.  It is not recommended because it was never really reliable and worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.changeToSpace`.",
        "name" : "moveToSpace",
        "stripped_doc" : [
          "LEGACY: Switches to the space at the given index, 1-indexed (as usual).",
          ""
        ],
        "desc" : "LEGACY: Switches to the space at the given index, 1-indexed (as usual).",
        "notes" : [
          " * this function may go away in a future update",
          "",
          " * this functions is included for backwards compatibility.  It is not recommended because it was never really reliable and worked by indexing the spaces, which can be rearranged by the operating system anyways.  Use `hs._asm.undocumented.spaces.changeToSpace`."
        ],
        "signature" : "hs._asm.undocumented.spaces.moveToSpace(number)",
        "type" : "Function",
        "returns" : [

        ],
        "def" : "hs._asm.undocumented.spaces.moveToSpace(number)",
        "parameters" : [

        ]
      }
    ],
    "Command" : [

    ],
    "doc" : "These functions utilize private API's within the OS X internals, and are known to have unpredictable behavior under Mavericks and Yosemite when \"Displays have separate Spaces\" is checked under the Mission Control system preferences.",
    "name" : "hs._asm.undocumented.spaces"
  }
]